function colorPop(d) {
    return d > 50000 ? '#800026' :
      d > 40000 ? '#BD0026' :
        d > 30000 ? '#E31A1C' :
          d > 20000 ? '#FC4E2A' :
            d > 10000 ? '#FEB24C' :
              d > 1 ? '#FED976' :
                '#FFEDA0';
  }

async function loadData() {

    const response = await axios.get("singaporePopulation2022.geojson");

    //totalPopulation
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.totalPopulation)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7
        }
      },

      onEachFeature: function(feature, layer) {
        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })
        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone       : </b> ${feature.properties.subZone} <br>
             <b> Total Population: </b> ${feature.properties.totalPopulation} <br>
             `)
      }

    }).addTo(singaporePopulationLayer)
    //femalePopulation
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.femalePopulation)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone      : </b> ${feature.properties.subZone} <br>
             <b> Female Population: </b> ${feature.properties.femalePopulation} <br>
             `)

      }
    }).addTo(femalePopulationLayer)
    //malePopulation
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.malePopulation)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
          function: resetHighlight,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone       : </b> ${feature.properties.subZone} <br>
             <b> Male Population: </b> ${feature.properties.malePopulation} <br>
             `)

      }
    }).addTo(malePopulationLayer)
    //population less than five
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.lessThanFive)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
          function: resetHighlight,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone     : </b> ${feature.properties.subZone} <br>
             <b> Population Aged Below 5 Years: </b> ${feature.properties.lessThanFive} <br>
             `)

      }
    }).addTo(lessThanFiveLayer)
    //population older than 65
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.olderThan65)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
          function: resetHighlight,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone     : </b> ${feature.properties.subZone} <br>
             <b> Population Aged 65 and Over: </b> ${feature.properties.olderThan65} <br>
             `)

      }
    }).addTo(olderThan65Layer)
    //HDB population
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.HDB)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
          function: resetHighlight,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone     : </b> ${feature.properties.subZone} <br>
             <b> Population Staying in HDB Flats: </b> ${feature.properties.HDB} <br>
             `)

      }
    }).addTo(HDBLayer)
    //Condo population
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.condo)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
          function: resetHighlight,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone     : </b> ${feature.properties.subZone} <br>
             <b> Population Staying in Condominium: </b> ${feature.properties.condon} <br>
             `)

      }
    }).addTo(condoLayer)
    //LandedProperties population
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.landedProperties)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
          function: resetHighlight,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone     : </b> ${feature.properties.subZone} <br>
             <b> Population Staying in Landed Properties: </b> ${feature.properties.landedProperties} <br>
             `)

      }
    }).addTo(landedPropertiesLayer)

    return response
  }

  loadData();

async function main() {
  init();

  function init() {
    let map = initMap()

    document.querySelector('#searchBtn').addEventListener("click", async function() {

      // async function loadData() {
      //   const response = await axios.get("singaporePopulation2022.geojson");
      //   // console.log(response)
      //   return response.data;
      // }


      const searchInput = document.querySelector('#searchTerms').value;
      console.log(searchInput);
      const center = map.getBounds().getCenter();
      const ll = center.lat + "," + center.lng;
      // // console.log(center, ll)
      const results = await loadData(searchInput, ll, 2000);
      console.log(results)
      for (let r of results.features) {
        const lat = r.geometry.coordinates[0][0][0][0]
        const lngs = r.geometry.coordinates[0][0][0][1]
        const marker = L.marker([lat, lngs]);
        marker.addTo(map);
      }
    });
  }
}

function initMap() {
  //Setting center point
  const singapore = [1.34096, 103.8198]; //Singapore latlong
  const map = L.map('map').setView(singapore, 12);
  // console.log(map)

  L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
    attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery (c) <a href="https://www.mapbox.com/">Mapbox</a>',
    maxZoom: 18,
    id: 'mapbox/streets-v11',
    tileSize: 512,
    zoomOffset: -1,
    accessToken: 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw' //demo access token
  }).addTo(map);

  // For marker and cluster
  // function onLocationFound(e) {
  //   var radius = e.accuracy;

  //   L.marker(e.latlng).addTo(map)
  //     .bindPopup("You are within" + radius + " meters from this point").openPopup();

  //   L.circle(e.latlng, radius).addTo(map);
  // }

  // map.on('locationfound', onLocationFound);

  // function onLocationError(e) {
  //   alert(e.message);
  // }

  // map.on('locationerror', onLocationError);

  // const singaporePopulationLayer = L.markerClusterGroup().addTo(map);
  const singaporePopulationLayer = L.layerGroup().addTo(map);
  const femalePopulationLayer = L.layerGroup().addTo(map);
  const malePopulationLayer = L.layerGroup().addTo(map);
  const lessThanFiveLayer = L.layerGroup().addTo(map);
  const olderThan65Layer = L.layerGroup().addTo(map);
  const HDBLayer = L.layerGroup().addTo(map);
  const condoLayer = L.layerGroup().addTo(map);
  const landedPropertiesLayer = L.layerGroup().addTo(map);

  let baseLayers = {
    'Overall Resident Population': singaporePopulationLayer,
    'Female Resident Population': femalePopulationLayer,
    'Male Resident Population': malePopulationLayer,
    'Resident Population Aged Below 5 Years': lessThanFiveLayer,
    'Resident Population Aged 65 Years and Over': olderThan65Layer,
    'Resident Population Staying in HDB Flats ': HDBLayer,
    'Resident Population Staying in Condominium': condoLayer,
    'Resident Population Staying in Landed Properties': landedPropertiesLayer
  }

  L.control.layers(baseLayers).addTo(map);

  // document.querySelector('#toggle-btn').addEvenListener('click', function() {
  // // use hasLayer() to check if the map already have the shopping layer group
  // // reminder: group2 contains all the circles
  //         if (map.hasLayer(group2)) {
  //             map.removeLayer(group2);
  //         } else {
  //               map.addLayer(group2);
  //         }
  // })

  function colorPop(d) {
    return d > 50000 ? '#800026' :
      d > 40000 ? '#BD0026' :
        d > 30000 ? '#E31A1C' :
          d > 20000 ? '#FC4E2A' :
            d > 10000 ? '#FEB24C' :
              d > 1 ? '#FED976' :
                '#FFEDA0';
  }

  function highlightFeature(e) {
    // console.log(e)
    var layer = e.target;

    layer.setStyle({
      weight: 5,
      color: 'black',
      dashArray: '',
      fillOpacity: 0.7
    });

    layer.bringToFront();
    info.update(layer.feature.properties);
  }

  function resetHighlight(e) {
    let layer = e.target;
    layer.setStyle({
      weight: 2,
      opacity: 1,
      color: "white",
      dashArray: '3',
      fillOpacity: 0.7
    })

    // layer.bringToFront();
    // map.resetStyle(e.target),
    info.update()
  }


  function zoomToFeature(e) {
    map.fitBounds(e.target.getBounds());
  }

  var info = L.control();

  info.onAdd = function(layer) {
    this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
    this.update();
    return this._div;
  };



  // method that we will use to update the control based on feature properties passed
  info.update = function(props) {
    this._div.innerHTML =
      '<h4>Total Resident Population</h4>' +
      (props ? '<b>' +
        "Planning Area : " + props.planningArea + '</b><br />' +
        "Sub Zone : " + props.subZone + '</b><br />' +
        props.totalPopulation
        : 'Mouse hover over a sub zone');
  };

  info.addTo(map);

  var legend = L.control({ position: 'bottomright' });
  legend.onAdd = function() {

    var div = L.DomUtil.create('div', 'info legend'),
      grades = [0, 10000, 20000, 30000, 40000, 50000];

    // loop through density intervals and generate a label with a colored square for each interval
    for (var i = 0; i < grades.length; i++) {
      div.innerHTML +=
        // '<h4>Singapore Population</h4>'+ '</b><br />' + 
        '<i style="background:' + colorPop(grades[i] + 1) + '"></i> ' +
        grades[i] + (grades[i + 1] ? ' - ' + grades[i + 1] + '<br>' : '+');
    }
    return div;
  };

  legend.addTo(map);


  async function loadData() {

    const response = await axios.get("singaporePopulation2022.geojson");

    //totalPopulation
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.totalPopulation)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7
        }
      },

      onEachFeature: function(feature, layer) {
        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })
        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone       : </b> ${feature.properties.subZone} <br>
             <b> Total Population: </b> ${feature.properties.totalPopulation} <br>
             `)
      }

    }).addTo(singaporePopulationLayer)
    //femalePopulation
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.femalePopulation)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone      : </b> ${feature.properties.subZone} <br>
             <b> Female Population: </b> ${feature.properties.femalePopulation} <br>
             `)

      }
    }).addTo(femalePopulationLayer)
    //malePopulation
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.malePopulation)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
          function: resetHighlight,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone       : </b> ${feature.properties.subZone} <br>
             <b> Male Population: </b> ${feature.properties.malePopulation} <br>
             `)

      }
    }).addTo(malePopulationLayer)
    //population less than five
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.lessThanFive)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
          function: resetHighlight,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone     : </b> ${feature.properties.subZone} <br>
             <b> Population Aged Below 5 Years: </b> ${feature.properties.lessThanFive} <br>
             `)

      }
    }).addTo(lessThanFiveLayer)
    //population older than 65
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.olderThan65)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
          function: resetHighlight,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone     : </b> ${feature.properties.subZone} <br>
             <b> Population Aged 65 and Over: </b> ${feature.properties.olderThan65} <br>
             `)

      }
    }).addTo(olderThan65Layer)
    //HDB population
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.HDB)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
          function: resetHighlight,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone     : </b> ${feature.properties.subZone} <br>
             <b> Population Staying in HDB Flats: </b> ${feature.properties.HDB} <br>
             `)

      }
    }).addTo(HDBLayer)
    //Condo population
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.condo)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
          function: resetHighlight,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone     : </b> ${feature.properties.subZone} <br>
             <b> Population Staying in Condominium: </b> ${feature.properties.condon} <br>
             `)

      }
    }).addTo(condoLayer)
    //LandedProperties population
    L.geoJson(response.data, {

      style: function(feature) {
        return {
          fillColor: (colorPop(feature.properties.landedProperties)),
          weight: 2,
          opacity: 1,
          color: "white",
          dashArray: '3',
          fillOpacity: 0.7,
          function: resetHighlight,
        }
      },

      onEachFeature: function(feature, layer) {

        layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: zoomToFeature
        })

        // console.log(feature);

        layer.bindPopup(`
             <b> Planning Area   : </b> ${feature.properties.planningArea} <br>
             <b> Sub Zone     : </b> ${feature.properties.subZone} <br>
             <b> Population Staying in Landed Properties: </b> ${feature.properties.landedProperties} <br>
             `)

      }
    }).addTo(landedPropertiesLayer)

    return response
  }

  loadData();

  return map


}

main();




